from aiogram import types
from aiogram import Router
from keyboard.main_button import *
from database.wallet_db import Wallet
from database.withdraw_db import WithdrawHistory
from create_bot import _
from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from keyboard.cancel_button import *

from keyboard.withdraw_button import get_withdraw_buttons
from handlers.profile.states import WithdrawState

from keyboard.cancel_button import *


withdraw_router = Router()

wallet_db = Wallet()
withdraw_db = WithdrawHistory()

@withdraw_router.callback_query(F.data == "withdraw_button")
async def withdraw(ctx: types.CallbackQuery, state: FSMContext):
    user_id = ctx.from_user.id

    wallet = await wallet_db.get_wallet(user_id)
    if wallet is None:
        await ctx.message.edit_text(_("üëõ –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫"), reply_markup=await get_profile_button())
        await state.clear()
        return
    
    withdraw = await withdraw_db.get_withdraw_address(user_id)
    if withdraw is not None:
        await ctx.message.edit_text(_("üëõ –í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥"), reply_markup=await get_profile_button())
        await state.clear()
        return

    await ctx.message.edit_text(
        _("üì§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É LAVE –¥–ª—è –≤—ã–≤–æ–¥–∞"),
        parse_mode="HTML",
        reply_markup=await get_cancel_button()
        )
    
    await state.set_state(WithdrawState.get_amount)

@withdraw_router.message(WithdrawState.get_amount)
async def get_amount(ctx: types.Message, state: FSMContext):
    user_id = ctx.from_user.id

    if isinstance(ctx, types.CallbackQuery):
        await ctx.message.edit_text(_("‚ùå –û—Ç–º–µ–Ω–∞"), reply_markup=await get_profile_button())
        await state.clear()
        return

    amount = ctx.text
    
    if amount.isdigit() is False:
        await ctx.reply(_("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"), reply_markup=await get_profile_button())
        await state.clear()
        return
    
    amount = int(amount)
    
    await state.update_data(amount=amount)
    
    if amount < 100:
        await ctx.reply(_("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 100 LAVE"), reply_markup=await get_profile_button())
        await state.clear()
        return
    
    ton = await wallet_db.get_ton(user_id)
    if ton < 0.05:
        await ctx.reply(_("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –≤—ã–≤–æ–¥–∞"), reply_markup=await get_profile_button())
        await state.clear()
        return
    
    lave = await wallet_db.get_lave(user_id)
    if lave < amount:
        await ctx.reply(_("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LAVE –¥–ª—è –≤—ã–≤–æ–¥–∞"), reply_markup=await get_profile_button())
        await state.clear()
        return
    
    wallet = await wallet_db.get_wallet(user_id)

    await ctx.reply(
        _("<b>üì§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞</b>" + "\n" + "\n" +

        "–°—É–º–º–∞: <code>{}</code> LAVE" + "\n" + 
        "–ö–æ–º–∏—Å—Å–∏—è: <code>0.05</code> TON" + "\n" +
        "–ê–¥—Ä–µ—Å: <code>{}</code>").format(amount, wallet),
        parse_mode="HTML",
        reply_markup=await get_withdraw_buttons(user_id)
        )
    
    await state.set_state(WithdrawState.get_approve)

@withdraw_router.callback_query(WithdrawState.get_approve, F.data == "comfirm_withdraw_button")
async def accept_approve(ctx: types.CallbackQuery, state: FSMContext):
    user_id = ctx.from_user.id
    
    data = await state.get_data()
    
    amount = data["amount"]
    
    wallet = await wallet_db.get_wallet(user_id)
    
    await wallet_db.set_lave(user_id, amount, False)
    await wallet_db.set_ton(user_id, 0.05, False)
    
    await withdraw_db.set_withdraw(user_id, wallet, amount)
    
    await ctx.message.edit_text(_("{} LAVE —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ üëõ").format(amount), parse_mode="HTML")
    await state.clear()

@withdraw_router.callback_query(WithdrawState.get_approve, F.data == "cancel_withdraw_button")
async def cancel_approve(ctx: types.CallbackQuery, state: FSMContext):
    user_id = ctx.from_user.id
    
    await ctx.message.edit_text(_("‚ùå –û—Ç–º–µ–Ω–∞"), parse_mode="HTML", reply_markup=await get_profile_button())
    await state.clear()